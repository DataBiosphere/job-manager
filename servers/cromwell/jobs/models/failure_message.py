# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class FailureMessage(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, task_name=None, failure=None, timestamp=None, stdout=None, stderr=None, call_root=None):
        """
        FailureMessage - a model defined in Swagger

        :param task_name: The task_name of this FailureMessage.
        :type task_name: str
        :param failure: The failure of this FailureMessage.
        :type failure: str
        :param timestamp: The timestamp of this FailureMessage.
        :type timestamp: datetime
        :param stdout: The stdout of this FailureMessage.
        :type stdout: str
        :param stderr: The stderr of this FailureMessage.
        :type stderr: str
        :param call_root: The call_root of this FailureMessage.
        :type call_root: str
        """
        self.swagger_types = {
            'task_name': str,
            'failure': str,
            'timestamp': datetime,
            'stdout': str,
            'stderr': str,
            'call_root': str
        }

        self.attribute_map = {
            'task_name': 'taskName',
            'failure': 'failure',
            'timestamp': 'timestamp',
            'stdout': 'stdout',
            'stderr': 'stderr',
            'call_root': 'callRoot'
        }

        self._task_name = task_name
        self._failure = failure
        self._timestamp = timestamp
        self._stdout = stdout
        self._stderr = stderr
        self._call_root = call_root

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FailureMessage of this FailureMessage.
        :rtype: FailureMessage
        """
        return deserialize_model(dikt, cls)

    @property
    def task_name(self):
        """
        Gets the task_name of this FailureMessage.
        The name of the task that generated the failure message

        :return: The task_name of this FailureMessage.
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """
        Sets the task_name of this FailureMessage.
        The name of the task that generated the failure message

        :param task_name: The task_name of this FailureMessage.
        :type task_name: str
        """

        self._task_name = task_name

    @property
    def failure(self):
        """
        Gets the failure of this FailureMessage.
        The failure message

        :return: The failure of this FailureMessage.
        :rtype: str
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """
        Sets the failure of this FailureMessage.
        The failure message

        :param failure: The failure of this FailureMessage.
        :type failure: str
        """
        if failure is None:
            raise ValueError("Invalid value for `failure`, must not be `None`")

        self._failure = failure

    @property
    def timestamp(self):
        """
        Gets the timestamp of this FailureMessage.
        The time at which this failure occurred

        :return: The timestamp of this FailureMessage.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this FailureMessage.
        The time at which this failure occurred

        :param timestamp: The timestamp of this FailureMessage.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def stdout(self):
        """
        Gets the stdout of this FailureMessage.
        Path to the standard output file for this task or shard

        :return: The stdout of this FailureMessage.
        :rtype: str
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """
        Sets the stdout of this FailureMessage.
        Path to the standard output file for this task or shard

        :param stdout: The stdout of this FailureMessage.
        :type stdout: str
        """

        self._stdout = stdout

    @property
    def stderr(self):
        """
        Gets the stderr of this FailureMessage.
        Path to the standard error file for this task or shard

        :return: The stderr of this FailureMessage.
        :rtype: str
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """
        Sets the stderr of this FailureMessage.
        Path to the standard error file for this task or shard

        :param stderr: The stderr of this FailureMessage.
        :type stderr: str
        """

        self._stderr = stderr

    @property
    def call_root(self):
        """
        Gets the call_root of this FailureMessage.
        The root directory of the task or shard execution

        :return: The call_root of this FailureMessage.
        :rtype: str
        """
        return self._call_root

    @call_root.setter
    def call_root(self, call_root):
        """
        Sets the call_root of this FailureMessage.
        The root directory of the task or shard execution

        :param call_root: The call_root of this FailureMessage.
        :type call_root: str
        """

        self._call_root = call_root

