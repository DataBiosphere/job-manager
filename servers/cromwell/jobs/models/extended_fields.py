# coding: utf-8

from __future__ import absolute_import
from jobs.models.event import Event
from jobs.models.task_metadata import TaskMetadata
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ExtendedFields(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id=None, status_detail=None, logs=None, last_update=None, envs=None, source_file=None, parent_job_id=None, timing_url=None, tasks=None, events=None):
        """
        ExtendedFields - a model defined in Swagger

        :param user_id: The user_id of this ExtendedFields.
        :type user_id: str
        :param status_detail: The status_detail of this ExtendedFields.
        :type status_detail: str
        :param logs: The logs of this ExtendedFields.
        :type logs: object
        :param last_update: The last_update of this ExtendedFields.
        :type last_update: datetime
        :param envs: The envs of this ExtendedFields.
        :type envs: object
        :param source_file: The source_file of this ExtendedFields.
        :type source_file: str
        :param parent_job_id: The parent_job_id of this ExtendedFields.
        :type parent_job_id: str
        :param timing_url: The timing_url of this ExtendedFields.
        :type timing_url: str
        :param tasks: The tasks of this ExtendedFields.
        :type tasks: List[TaskMetadata]
        :param events: The events of this ExtendedFields.
        :type events: List[Event]
        """
        self.swagger_types = {
            'user_id': str,
            'status_detail': str,
            'logs': object,
            'last_update': datetime,
            'envs': object,
            'source_file': str,
            'parent_job_id': str,
            'timing_url': str,
            'tasks': List[TaskMetadata],
            'events': List[Event]
        }

        self.attribute_map = {
            'user_id': 'userId',
            'status_detail': 'statusDetail',
            'logs': 'logs',
            'last_update': 'lastUpdate',
            'envs': 'envs',
            'source_file': 'sourceFile',
            'parent_job_id': 'parentJobId',
            'timing_url': 'timingUrl',
            'tasks': 'tasks',
            'events': 'events'
        }

        self._user_id = user_id
        self._status_detail = status_detail
        self._logs = logs
        self._last_update = last_update
        self._envs = envs
        self._source_file = source_file
        self._parent_job_id = parent_job_id
        self._timing_url = timing_url
        self._tasks = tasks
        self._events = events

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExtendedFields of this ExtendedFields.
        :rtype: ExtendedFields
        """
        return deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """
        Gets the user_id of this ExtendedFields.
        The user associated with the job.

        :return: The user_id of this ExtendedFields.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ExtendedFields.
        The user associated with the job.

        :param user_id: The user_id of this ExtendedFields.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def status_detail(self):
        """
        Gets the status_detail of this ExtendedFields.
        Longer text description of the job status.

        :return: The status_detail of this ExtendedFields.
        :rtype: str
        """
        return self._status_detail

    @status_detail.setter
    def status_detail(self, status_detail):
        """
        Sets the status_detail of this ExtendedFields.
        Longer text description of the job status.

        :param status_detail: The status_detail of this ExtendedFields.
        :type status_detail: str
        """

        self._status_detail = status_detail

    @property
    def logs(self):
        """
        Gets the logs of this ExtendedFields.
        Map of type of log file to its file location.

        :return: The logs of this ExtendedFields.
        :rtype: object
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """
        Sets the logs of this ExtendedFields.
        Map of type of log file to its file location.

        :param logs: The logs of this ExtendedFields.
        :type logs: object
        """

        self._logs = logs

    @property
    def last_update(self):
        """
        Gets the last_update of this ExtendedFields.
        Job last update datetime in ISO8601 format.

        :return: The last_update of this ExtendedFields.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """
        Sets the last_update of this ExtendedFields.
        Job last update datetime in ISO8601 format.

        :param last_update: The last_update of this ExtendedFields.
        :type last_update: datetime
        """

        self._last_update = last_update

    @property
    def envs(self):
        """
        Gets the envs of this ExtendedFields.
        Map of ENV variables key values associated with the job.

        :return: The envs of this ExtendedFields.
        :rtype: object
        """
        return self._envs

    @envs.setter
    def envs(self, envs):
        """
        Sets the envs of this ExtendedFields.
        Map of ENV variables key values associated with the job.

        :param envs: The envs of this ExtendedFields.
        :type envs: object
        """

        self._envs = envs

    @property
    def source_file(self):
        """
        Gets the source_file of this ExtendedFields.
        The text of the script executed by this job.

        :return: The source_file of this ExtendedFields.
        :rtype: str
        """
        return self._source_file

    @source_file.setter
    def source_file(self, source_file):
        """
        Sets the source_file of this ExtendedFields.
        The text of the script executed by this job.

        :param source_file: The source_file of this ExtendedFields.
        :type source_file: str
        """

        self._source_file = source_file

    @property
    def parent_job_id(self):
        """
        Gets the parent_job_id of this ExtendedFields.
        The parent job ID for the job.

        :return: The parent_job_id of this ExtendedFields.
        :rtype: str
        """
        return self._parent_job_id

    @parent_job_id.setter
    def parent_job_id(self, parent_job_id):
        """
        Sets the parent_job_id of this ExtendedFields.
        The parent job ID for the job.

        :param parent_job_id: The parent_job_id of this ExtendedFields.
        :type parent_job_id: str
        """

        self._parent_job_id = parent_job_id

    @property
    def timing_url(self):
        """
        Gets the timing_url of this ExtendedFields.
        URL for tasks timing diagram.

        :return: The timing_url of this ExtendedFields.
        :rtype: str
        """
        return self._timing_url

    @timing_url.setter
    def timing_url(self, timing_url):
        """
        Sets the timing_url of this ExtendedFields.
        URL for tasks timing diagram.

        :param timing_url: The timing_url of this ExtendedFields.
        :type timing_url: str
        """

        self._timing_url = timing_url

    @property
    def tasks(self):
        """
        Gets the tasks of this ExtendedFields.

        :return: The tasks of this ExtendedFields.
        :rtype: List[TaskMetadata]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """
        Sets the tasks of this ExtendedFields.

        :param tasks: The tasks of this ExtendedFields.
        :type tasks: List[TaskMetadata]
        """

        self._tasks = tasks

    @property
    def events(self):
        """
        Gets the events of this ExtendedFields.

        :return: The events of this ExtendedFields.
        :rtype: List[Event]
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this ExtendedFields.

        :param events: The events of this ExtendedFields.
        :type events: List[Event]
        """

        self._events = events

