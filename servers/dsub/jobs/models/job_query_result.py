# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class JobQueryResult(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, status=None, start=None, end=None, labels=None):
        """
        JobQueryResult - a model defined in Swagger

        :param id: The id of this JobQueryResult.
        :type id: str
        :param name: The name of this JobQueryResult.
        :type name: str
        :param status: The status of this JobQueryResult.
        :type status: str
        :param start: The start of this JobQueryResult.
        :type start: datetime
        :param end: The end of this JobQueryResult.
        :type end: datetime
        :param labels: The labels of this JobQueryResult.
        :type labels: object
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'status': str,
            'start': datetime,
            'end': datetime,
            'labels': object
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'status': 'status',
            'start': 'start',
            'end': 'end',
            'labels': 'labels'
        }

        self._id = id
        self._name = name
        self._status = status
        self._start = start
        self._end = end
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobQueryResult of this JobQueryResult.
        :rtype: JobQueryResult
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self):
        """
        Gets the id of this JobQueryResult.
        Job ID

        :return: The id of this JobQueryResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this JobQueryResult.
        Job ID

        :param id: The id of this JobQueryResult.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this JobQueryResult.
        Job name

        :return: The name of this JobQueryResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this JobQueryResult.
        Job name

        :param name: The name of this JobQueryResult.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this JobQueryResult.
        Job status

        :return: The status of this JobQueryResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this JobQueryResult.
        Job status

        :param status: The status of this JobQueryResult.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def start(self):
        """
        Gets the start of this JobQueryResult.
        Job start datetime

        :return: The start of this JobQueryResult.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this JobQueryResult.
        Job start datetime

        :param start: The start of this JobQueryResult.
        :type start: datetime
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this JobQueryResult.
        Job end datetime

        :return: The end of this JobQueryResult.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this JobQueryResult.
        Job end datetime

        :param end: The end of this JobQueryResult.
        :type end: datetime
        """

        self._end = end

    @property
    def labels(self):
        """
        Gets the labels of this JobQueryResult.
        Custom job labels with string values

        :return: The labels of this JobQueryResult.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this JobQueryResult.
        Custom job labels with string values

        :param labels: The labels of this JobQueryResult.
        :type labels: object
        """

        self._labels = labels

