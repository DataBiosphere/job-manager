# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class JobAbortResponse(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, status=None):
        """
        JobAbortResponse - a model defined in Swagger

        :param id: The id of this JobAbortResponse.
        :type id: str
        :param status: The status of this JobAbortResponse.
        :type status: str
        """
        self.swagger_types = {
            'id': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status'
        }

        self._id = id
        self._status = status

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobAbortResponse of this JobAbortResponse.
        :rtype: JobAbortResponse
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self):
        """
        Gets the id of this JobAbortResponse.
        The identifier of the job

        :return: The id of this JobAbortResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this JobAbortResponse.
        The identifier of the job

        :param id: The id of this JobAbortResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """
        Gets the status of this JobAbortResponse.
        The status of the job

        :return: The status of this JobAbortResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this JobAbortResponse.
        The status of the job

        :param status: The status of this JobAbortResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

