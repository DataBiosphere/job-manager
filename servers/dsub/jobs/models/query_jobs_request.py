# coding: utf-8

from __future__ import absolute_import
from jobs.models.job_status import JobStatus
import re
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class QueryJobsRequest(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, start=None, end=None, statuses=None, name=None, page_size=None, page_token=None, parent_id=None):
        """
        QueryJobsResult - a model defined in Swagger

        :param start: The start of this QueryJobsResult.
        :type start: datetime
        :param end: The end of this QueryJobsResult.
        :type end: datetime
        :param statuses: The statuses of this QueryJobsResult.
        :type statuses: List[JobStatus]
        :param name: The name of this QueryJobsResult.
        :type name: str
        :param page_size: The page_size of this QueryJobsResult.
        :type page_size: int
        :param page_token: The page_token of this QueryJobsResult.
        :type page_token: str
        :param parent_id: The parent_id of this QueryJobsResult.
        :type parent_id: str
        """
        self.swagger_types = {
            'start': datetime,
            'end': datetime,
            'statuses': List[JobStatus],
            'name': str,
            'page_size': int,
            'page_token': str,
            'parent_id': str
        }

        self.attribute_map = {
            'start': 'start',
            'end': 'end',
            'statuses': 'statuses',
            'name': 'name',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'parent_id': 'parentId'
        }

        self._start = start
        self._end = end
        self._statuses = statuses
        self._name = name
        self._page_size = page_size
        self._page_token = page_token
        self._parent_id = parent_id

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QueryJobsResult of this QueryJobsResult.
        :rtype: QueryJobsRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def start(self):
        """
        Gets the start of this QueryJobsResult.
        Returns only jobs with an equal or later start datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date. 

        :return: The start of this QueryJobsResult.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this QueryJobsResult.
        Returns only jobs with an equal or later start datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date. 

        :param start: The start of this QueryJobsResult.
        :type start: datetime
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this QueryJobsResult.
        Returns only jobs with an equal or earlier end datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date. 

        :return: The end of this QueryJobsResult.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this QueryJobsResult.
        Returns only jobs with an equal or earlier end datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date. 

        :param end: The end of this QueryJobsResult.
        :type end: datetime
        """

        self._end = end

    @property
    def statuses(self):
        """
        Gets the statuses of this QueryJobsResult.
        Returns only jobs with the specified status.  If specified multiple times, returns jobs in any of the specified statuses. 

        :return: The statuses of this QueryJobsResult.
        :rtype: List[JobStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """
        Sets the statuses of this QueryJobsResult.
        Returns only jobs with the specified status.  If specified multiple times, returns jobs in any of the specified statuses. 

        :param statuses: The statuses of this QueryJobsResult.
        :type statuses: List[JobStatus]
        """

        self._statuses = statuses

    @property
    def name(self):
        """
        Gets the name of this QueryJobsResult.
        Returns only jobs with the specified name.  If specified multiple times, returns jobs with any of the specified names. 

        :return: The name of this QueryJobsResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this QueryJobsResult.
        Returns only jobs with the specified name.  If specified multiple times, returns jobs with any of the specified names. 

        :param name: The name of this QueryJobsResult.
        :type name: str
        """
        if name is not None and not re.search('^[a-zA-Z][a-zA-Z0-9_]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9_]*$/`")

        self._name = name

    @property
    def page_size(self):
        """
        Gets the page_size of this QueryJobsResult.
        The maximum number of results to return in a single page. If unspecified, a server default will be used. Note that the server may elect to return fewer results per page than requested. 

        :return: The page_size of this QueryJobsResult.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this QueryJobsResult.
        The maximum number of results to return in a single page. If unspecified, a server default will be used. Note that the server may elect to return fewer results per page than requested. 

        :param page_size: The page_size of this QueryJobsResult.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """
        Gets the page_token of this QueryJobsResult.
        The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of `nextPageToken` from the previous response. 

        :return: The page_token of this QueryJobsResult.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """
        Sets the page_token of this QueryJobsResult.
        The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of `nextPageToken` from the previous response. 

        :param page_token: The page_token of this QueryJobsResult.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def parent_id(self):
        """
        Gets the parent_id of this QueryJobsResult.
        Returns only jobs with the given parent ID. This parameter may be unsupported for some API implementations or required for others depending on whether there exists a logical noun above a job in the resource hierarchy (for example, a cloud project). If the presence of this parameter is incompatible with the server, it may return a 400 HTTP status. 

        :return: The parent_id of this QueryJobsResult.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this QueryJobsResult.
        Returns only jobs with the given parent ID. This parameter may be unsupported for some API implementations or required for others depending on whether there exists a logical noun above a job in the resource hierarchy (for example, a cloud project). If the presence of this parameter is incompatible with the server, it may return a 400 HTTP status. 

        :param parent_id: The parent_id of this QueryJobsResult.
        :type parent_id: str
        """

        self._parent_id = parent_id

