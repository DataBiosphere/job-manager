# coding: utf-8

from __future__ import absolute_import
from jobs.models.job_status import JobStatus
import re
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class QueryJobsRequest(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, start=None, end=None, statuses=None, name=None, parent_id=None):
        """
        QueryJobsRequest - a model defined in Swagger

        :param start: The start of this QueryJobsRequest.
        :type start: datetime
        :param end: The end of this QueryJobsRequest.
        :type end: datetime
        :param statuses: The statuses of this QueryJobsRequest.
        :type statuses: List[JobStatus]
        :param name: The name of this QueryJobsRequest.
        :type name: str
        :param parent_id: The parent_id of this QueryJobsRequest.
        :type parent_id: str
        """
        self.swagger_types = {
            'start': datetime,
            'end': datetime,
            'statuses': List[JobStatus],
            'name': str,
            'parent_id': str
        }

        self.attribute_map = {
            'start': 'start',
            'end': 'end',
            'statuses': 'statuses',
            'name': 'name',
            'parent_id': 'parentId'
        }

        self._start = start
        self._end = end
        self._statuses = statuses
        self._name = name
        self._parent_id = parent_id

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QueryJobsRequest of this QueryJobsRequest.
        :rtype: QueryJobsRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def start(self):
        """
        Gets the start of this QueryJobsRequest.
        Returns only jobs with an equal or later start datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date. 

        :return: The start of this QueryJobsRequest.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this QueryJobsRequest.
        Returns only jobs with an equal or later start datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date. 

        :param start: The start of this QueryJobsRequest.
        :type start: datetime
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this QueryJobsRequest.
        Returns only jobs with an equal or earlier end datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date. 

        :return: The end of this QueryJobsRequest.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this QueryJobsRequest.
        Returns only jobs with an equal or earlier end datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date. 

        :param end: The end of this QueryJobsRequest.
        :type end: datetime
        """

        self._end = end

    @property
    def statuses(self):
        """
        Gets the statuses of this QueryJobsRequest.
        Returns only jobs with the specified status.  If specified multiple times, returns jobs in any of the specified statuses. 

        :return: The statuses of this QueryJobsRequest.
        :rtype: List[JobStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """
        Sets the statuses of this QueryJobsRequest.
        Returns only jobs with the specified status.  If specified multiple times, returns jobs in any of the specified statuses. 

        :param statuses: The statuses of this QueryJobsRequest.
        :type statuses: List[JobStatus]
        """

        self._statuses = statuses

    @property
    def name(self):
        """
        Gets the name of this QueryJobsRequest.
        Returns only jobs with the specified name.  If specified multiple times, returns jobs with any of the specified names. 

        :return: The name of this QueryJobsRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this QueryJobsRequest.
        Returns only jobs with the specified name.  If specified multiple times, returns jobs with any of the specified names. 

        :param name: The name of this QueryJobsRequest.
        :type name: str
        """
        if name is not None and not re.search('^[a-zA-Z][a-zA-Z0-9_]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9_]*$/`")

        self._name = name

    @property
    def parent_id(self):
        """
        Gets the parent_id of this QueryJobsRequest.
        Returns only jobs with the given parent ID. This parameter may be unsupported for some API implementations or required for others depending on whether there exists a logical noun above a job in the resource hierarchy (for example, a cloud project). If the presence of this parameter is incompatible with the server, it may return a 400 HTTP status. 

        :return: The parent_id of this QueryJobsRequest.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this QueryJobsRequest.
        Returns only jobs with the given parent ID. This parameter may be unsupported for some API implementations or required for others depending on whether there exists a logical noun above a job in the resource hierarchy (for example, a cloud project). If the presence of this parameter is incompatible with the server, it may return a 400 HTTP status. 

        :param parent_id: The parent_id of this QueryJobsRequest.
        :type parent_id: str
        """

        self._parent_id = parent_id

