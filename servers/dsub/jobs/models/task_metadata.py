# coding: utf-8

from __future__ import absolute_import
from jobs.models.failure_message import FailureMessage
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class TaskMetadata(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, inputs=None, execution_status=None, start=None, end=None, name=None, job_id=None, failures=None, return_code=None, stdout=None, stderr=None, attempts=None):
        """
        TaskMetadata - a model defined in Swagger

        :param inputs: The inputs of this TaskMetadata.
        :type inputs: object
        :param execution_status: The execution_status of this TaskMetadata.
        :type execution_status: str
        :param start: The start of this TaskMetadata.
        :type start: datetime
        :param end: The end of this TaskMetadata.
        :type end: datetime
        :param name: The name of this TaskMetadata.
        :type name: str
        :param job_id: The job_id of this TaskMetadata.
        :type job_id: str
        :param failures: The failures of this TaskMetadata.
        :type failures: List[FailureMessage]
        :param return_code: The return_code of this TaskMetadata.
        :type return_code: int
        :param stdout: The stdout of this TaskMetadata.
        :type stdout: str
        :param stderr: The stderr of this TaskMetadata.
        :type stderr: str
        :param attempts: The attempts of this TaskMetadata.
        :type attempts: int
        """
        self.swagger_types = {
            'inputs': object,
            'execution_status': str,
            'start': datetime,
            'end': datetime,
            'name': str,
            'job_id': str,
            'failures': List[FailureMessage],
            'return_code': int,
            'stdout': str,
            'stderr': str,
            'attempts': int
        }

        self.attribute_map = {
            'inputs': 'inputs',
            'execution_status': 'executionStatus',
            'start': 'start',
            'end': 'end',
            'name': 'name',
            'job_id': 'jobId',
            'failures': 'failures',
            'return_code': 'returnCode',
            'stdout': 'stdout',
            'stderr': 'stderr',
            'attempts': 'attempts'
        }

        self._inputs = inputs
        self._execution_status = execution_status
        self._start = start
        self._end = end
        self._name = name
        self._job_id = job_id
        self._failures = failures
        self._return_code = return_code
        self._stdout = stdout
        self._stderr = stderr
        self._attempts = attempts

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskMetadata of this TaskMetadata.
        :rtype: TaskMetadata
        """
        return deserialize_model(dikt, cls)

    @property
    def inputs(self):
        """
        Gets the inputs of this TaskMetadata.
        Mapping of input fully qualified names to stringified values

        :return: The inputs of this TaskMetadata.
        :rtype: object
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """
        Sets the inputs of this TaskMetadata.
        Mapping of input fully qualified names to stringified values

        :param inputs: The inputs of this TaskMetadata.
        :type inputs: object
        """

        self._inputs = inputs

    @property
    def execution_status(self):
        """
        Gets the execution_status of this TaskMetadata.
        Backend-specific task status.

        :return: The execution_status of this TaskMetadata.
        :rtype: str
        """
        return self._execution_status

    @execution_status.setter
    def execution_status(self, execution_status):
        """
        Sets the execution_status of this TaskMetadata.
        Backend-specific task status.

        :param execution_status: The execution_status of this TaskMetadata.
        :type execution_status: str
        """

        self._execution_status = execution_status

    @property
    def start(self):
        """
        Gets the start of this TaskMetadata.
        Start datetime of the task execution in ISO8601 format with milliseconds

        :return: The start of this TaskMetadata.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this TaskMetadata.
        Start datetime of the task execution in ISO8601 format with milliseconds

        :param start: The start of this TaskMetadata.
        :type start: datetime
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this TaskMetadata.
        End datetime of the task execution in ISO8601 format with milliseconds

        :return: The end of this TaskMetadata.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this TaskMetadata.
        End datetime of the task execution in ISO8601 format with milliseconds

        :param end: The end of this TaskMetadata.
        :type end: datetime
        """

        self._end = end

    @property
    def name(self):
        """
        Gets the name of this TaskMetadata.
        The name of the job

        :return: The name of this TaskMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TaskMetadata.
        The name of the job

        :param name: The name of this TaskMetadata.
        :type name: str
        """

        self._name = name

    @property
    def job_id(self):
        """
        Gets the job_id of this TaskMetadata.
        Backend-specific job ID

        :return: The job_id of this TaskMetadata.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this TaskMetadata.
        Backend-specific job ID

        :param job_id: The job_id of this TaskMetadata.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def failures(self):
        """
        Gets the failures of this TaskMetadata.

        :return: The failures of this TaskMetadata.
        :rtype: List[FailureMessage]
        """
        return self._failures

    @failures.setter
    def failures(self, failures):
        """
        Sets the failures of this TaskMetadata.

        :param failures: The failures of this TaskMetadata.
        :type failures: List[FailureMessage]
        """

        self._failures = failures

    @property
    def return_code(self):
        """
        Gets the return_code of this TaskMetadata.
        Task execution return code

        :return: The return_code of this TaskMetadata.
        :rtype: int
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """
        Sets the return_code of this TaskMetadata.
        Task execution return code

        :param return_code: The return_code of this TaskMetadata.
        :type return_code: int
        """

        self._return_code = return_code

    @property
    def stdout(self):
        """
        Gets the stdout of this TaskMetadata.
        Path to the standard output file for this task

        :return: The stdout of this TaskMetadata.
        :rtype: str
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """
        Sets the stdout of this TaskMetadata.
        Path to the standard output file for this task

        :param stdout: The stdout of this TaskMetadata.
        :type stdout: str
        """

        self._stdout = stdout

    @property
    def stderr(self):
        """
        Gets the stderr of this TaskMetadata.
        Path to the standard error file for this task

        :return: The stderr of this TaskMetadata.
        :rtype: str
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """
        Sets the stderr of this TaskMetadata.
        Path to the standard error file for this task

        :param stderr: The stderr of this TaskMetadata.
        :type stderr: str
        """

        self._stderr = stderr

    @property
    def attempts(self):
        """
        Gets the attempts of this TaskMetadata.
        Number of times the task was run

        :return: The attempts of this TaskMetadata.
        :rtype: int
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """
        Sets the attempts of this TaskMetadata.
        Number of times the task was run

        :param attempts: The attempts of this TaskMetadata.
        :type attempts: int
        """

        self._attempts = attempts

