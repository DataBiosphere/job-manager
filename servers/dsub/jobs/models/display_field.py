# coding: utf-8

from __future__ import absolute_import
from jobs.models.field_type import FieldType
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class DisplayField(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, field=None, display=None, editable=False, field_type=None, valid_field_values=None):
        """
        DisplayField - a model defined in Swagger

        :param field: The field of this DisplayField.
        :type field: str
        :param display: The display of this DisplayField.
        :type display: str
        :param editable: The editable of this DisplayField.
        :type editable: bool
        :param field_type: The field_type of this DisplayField.
        :type field_type: FieldType
        :param valid_field_values: The valid_field_values of this DisplayField.
        :type valid_field_values: List[str]
        """
        self.swagger_types = {
            'field': str,
            'display': str,
            'editable': bool,
            'field_type': FieldType,
            'valid_field_values': List[str]
        }

        self.attribute_map = {
            'field': 'field',
            'display': 'display',
            'editable': 'editable',
            'field_type': 'fieldType',
            'valid_field_values': 'validFieldValues'
        }

        self._field = field
        self._display = display
        self._editable = editable
        self._field_type = field_type
        self._valid_field_values = valid_field_values

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DisplayField of this DisplayField.
        :rtype: DisplayField
        """
        return deserialize_model(dikt, cls)

    @property
    def field(self):
        """
        Gets the field of this DisplayField.

        :return: The field of this DisplayField.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this DisplayField.

        :param field: The field of this DisplayField.
        :type field: str
        """

        self._field = field

    @property
    def display(self):
        """
        Gets the display of this DisplayField.

        :return: The display of this DisplayField.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """
        Sets the display of this DisplayField.

        :param display: The display of this DisplayField.
        :type display: str
        """

        self._display = display

    @property
    def editable(self):
        """
        Gets the editable of this DisplayField.

        :return: The editable of this DisplayField.
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """
        Sets the editable of this DisplayField.

        :param editable: The editable of this DisplayField.
        :type editable: bool
        """

        self._editable = editable

    @property
    def field_type(self):
        """
        Gets the field_type of this DisplayField.

        :return: The field_type of this DisplayField.
        :rtype: FieldType
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """
        Sets the field_type of this DisplayField.

        :param field_type: The field_type of this DisplayField.
        :type field_type: FieldType
        """

        self._field_type = field_type

    @property
    def valid_field_values(self):
        """
        Gets the valid_field_values of this DisplayField.
        A list of values the field can be set to

        :return: The valid_field_values of this DisplayField.
        :rtype: List[str]
        """
        return self._valid_field_values

    @valid_field_values.setter
    def valid_field_values(self, valid_field_values):
        """
        Sets the valid_field_values of this DisplayField.
        A list of values the field can be set to

        :param valid_field_values: The valid_field_values of this DisplayField.
        :type valid_field_values: List[str]
        """

        self._valid_field_values = valid_field_values

