# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

job_defaults: &job_defaults
  working_directory: ~/job-manager

run_env_setup: &run_env_setup
  run:
    name: Setup Environment Variables
    command: |
      echo 'export PATH="${PATH}:${HOME}/job-manager/git-secrets"' >> $BASH_ENV

run_secret_setup: &run_secret_setup
  run:
    name: Install git secrets and configure minnie-kenny.sh
    command: |
      git clone https://github.com/awslabs/git-secrets.git
      pushd git-secrets >/dev/null
      git checkout ad82d68ee924906a0401dfd48de5057731a9bc84
      popd >/dev/null
      ./minnie-kenny.sh -f

jobs:
  ui:
    <<: *job_defaults
    machine:
      # latest pinned 20.04 version https://circleci.com/developer/machine/image/ubuntu-2004
      image: ubuntu-2004:2024.11.1
    steps:
      - checkout
      - <<: *run_env_setup
      - <<: *run_secret_setup
      - restore_cache:
          key: node-modules-{{ .Branch }}--{{ checksum "ui/package.json" }}
      - run:
          name: nvm install node and UI dependencies
          # The Circle Ubuntu machine images of yore apparently came with nvm installed, but the current images require
          # us to install it ourselves.
          command: |
            # Install curl
            apt update && apt -y upgrade && apt -y install curl

            # Use curl to download nvm and run its installer
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash

            # nvm setup commands
            export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            nvm install 14

            cd ui
            npm install

            npm install -g @angular/cli@14.2.1
      - save_cache:
          key: node-modules-{{ .Branch }}--{{ checksum "ui/package.json" }}
          paths:
            - "ui/node_modules"
      - run:
          name: Rebuild swagger
          command: |
            /bin/bash ./scripts/rebuild_swagger.sh
      - run:
          name: Lint angular code with eslint
          command: |
            cd ui
            # nvm setup commands and Node install reprised
            export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
            nvm install 14
            npm run eslint
      - run:
          name: Type check with tsc
          command: |
            cd ui
            # nvm setup commands and Node install reprised
            export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
            nvm install 14
            npm run tsc
      - run:
          name: Run UI unit tests
          command: |
            cd ui
            # nvm setup commands and Node install reprised
            export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
            nvm install 14
            ng test --watch=false --source-map=false --browsers=ChromeHeadless
      - run:
          name: Ensure the UI builds for prod
          # Target production to emulate deployment, but a dev environment
          # because we do not have a prod environment file.
          # https://github.com/angular/angular-cli/wiki/build#--dev-vs---prod-builds
          command: |
            cd ui
            # nvm setup commands and Node install reprised
            export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
            nvm install 14
            ng build --configuration=production

  backends:
    <<: *job_defaults
    machine:
      image: ubuntu-2004:202201-02
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/gcloud-service-key.json
    steps:
      - checkout
      - <<: *run_env_setup
      - <<: *run_secret_setup
      - restore_cache:
          key: node-modules-{{ .Branch }}--{{ checksum "servers/cromwell/requirements.txt" }}
      - restore_cache:
          key: node-modules-{{ .Branch }}--{{ checksum "servers/jm_utils/requirements.txt" }}
      - run:
          name: Rebuild swagger
          command: |
            /bin/bash ./scripts/rebuild_swagger.sh
      - run:
          name: Check version
          command: |
            python3 --version
            which python3
      - run:
          name: Install tox and yapf
          # tox (and detox) fail with older versions of more-itertools: https://github.com/pytest-dev/pytest/issues/4770
          command: |
            pip3 install --upgrade pip
            pip3 install tox>=3.26.0 pytest>=4.6.5 yapf
      - run:
          name: Lint python code with yapf
          command: |
            sh ./scripts/yapf_lint.sh
      - run:
          name: Run cromwell server tests
          command: |
            tox -c ./servers/cromwell
      - run:
          name: Run jm_utils server tests
          command: |
            tox -c ./servers/jm_utils
      - save_cache:
          key: node-modules-{{ .Branch }}--{{ checksum "servers/cromwell/requirements.txt" }}
          paths:
            - "servers/cromwell/.tox"
      - save_cache:
          key: node-modules-{{ .Branch }}--{{ checksum "servers/jm_utils/requirements.txt" }}
          paths:
            - "servers/jm_utils/.tox"

  secrets:
    <<: *job_defaults
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - <<: *run_env_setup
      - <<: *run_secret_setup
      - run:
          name: Check for git secrets
          command: |
            git secrets --scan-history

workflows:
  version: 2
  ui_and_backends_and_secrets:
    jobs:
      - ui
      - backends
      - secrets
