swagger: '2.0'
info:
  title: Job Monitor Service
  description: Job Monitor API for interacting with asynchronous batch jobs and workflows.
  license:
    name: BSD
    url: 'http://opensource.org/licenses/BSD-3-Clause'
  version: '0.0.1'
produces:
  - application/json
paths:
  '/jobs/{id}/abort':
    post:
      operationId: AbortJob
      summary: Abort a job by ID
      parameters:
        - name: id
          description: Job ID
          required: true
          type: string
          in: path
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          $ref: '#/responses/NotFound'
        '412':
          description: Job in terminal status
        '500':
          $ref: '#/responses/ServerError'
  '/jobs/query':
    post:
      # TODO(calbach): Reconcile QueryJobsResult with JobMetadata.
      # TODO(calbach): Add pagination support.
      operationId: QueryJobs
      summary: Query jobs by various filter criteria.
      parameters:
        - name: parameters
          required: true
          in: body
          schema:
            $ref: '#/definitions/QueryJobsRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/QueryJobsResponse'
        '400':
          $ref: '#/responses/BadRequest'
        '500':
          $ref: '#/responses/ServerError'
  '/jobs/{id}':
    get:
      operationId: GetJob
      summary: Query for job and task-level metadata for a specified job
      parameters:
        - name: id
          description: Job ID
          required: true
          type: string
          in: path
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/JobMetadataResponse'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          $ref: '#/responses/NotFound'
        '500':
          $ref: '#/responses/ServerError'
definitions:
  JobMetadataResponse:
    description: Job and task level metadata
    required:
      - id
      - status
      - submission
    properties:
      id:
        type: string
        description: The identifier of the job
      status:
        $ref: '#/definitions/JobStatus'
      submission:
        type: string
        format: date-time
        description: Submission datetime of the job in ISO8601 format with milliseconds
      start:
        type: string
        format: date-time
        description: Start datetime of the job in ISO8601 format with milliseconds
      end:
        type: string
        format: date-time
        description: End datetime of the job in ISO8601 format with milliseconds
      inputs:
        type: object
        description: Map of input keys to input values
      outputs:
        type: object
        description: Map of output keys to output values
      labels:
        type: object
        description: Custom job labels with string values
      tasks:
        type: array
        items:
          $ref: '#/definitions/TaskMetadata'
      failures:
        type: array
        items:
          $ref: '#/definitions/FailureMessage'
  JobStatus:
    type: string
    enum:
      - Submitted
      - Running
      - Aborting
      - Failed
      - Succeeded
      - Aborted
  TaskMetadata:
    description: Task level metadata
    properties:
      inputs:
        type: object
        description: Mapping of input fully qualified names to stringified values
      # TODO(Broad): Add executionStatus/status back in with a well-documented
      # enum (or JobStatus, if possible).
      start:
        type: string
        format: date-time
        description: Start datetime of the task execution in ISO8601 format with milliseconds
      end:
        type: string
        format: date-time
        description: End datetime of the task execution in ISO8601 format with milliseconds
      jobId:
        type: string
        description: Backend-specific job ID
      failures:
        type: array
        items:
          $ref: '#/definitions/FailureMessage'
      returnCode:
        type: integer
        description: Task execution return code
      stdout:
        type: string
        description: Path to the standard output file for this task
      stderr:
        type: string
        description: Path to the standard error file for this task
  FailureMessage:
    description: Failure messages
    required:
      - failure
    properties:
      failure:
        type: string
        description: The failure message
      timestamp:
        type: string
        format: date-time
        description: The time at which this failure occurred
  QueryJobsRequest:
    description: Job query parameters
    properties:
      start:
        type: string
        format: date-time
        description: >
          Returns only jobs with an equal or later start datetime.  Can be specified at most once.
          If both start and end date are specified, start date must be before or equal to end date.
      end:
        type: string
        format: date-time
        description: >
          Returns only jobs with an equal or earlier end datetime.  Can be specified at most once.
          If both start and end date are specified, start date must be before or equal to end date.
      statuses:
        type: array
        items:
          $ref: '#/definitions/JobStatus'
        description: >
          Returns only jobs with the specified status.  If specified multiple times,
          returns jobs in any of the specified statuses.
      name:
        type: string
        pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
        description: >
          Returns only jobs with the specified name.  If specified multiple times,
          returns jobs with any of the specified names.
      parentId:
        type: string
        description: >
          Returns only jobs with the given parent ID. This parameter may be
          unsupported for some API implementations or required for others
          depending on whether there exists a logical noun above a job
          in the resource hierarchy (for example, a cloud project). If the
          presence of this parameter is incompatible with the server, it may
          return a 400 HTTP status.
  QueryJobsResponse:
    description: Response to a job query
    required:
      - results
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/QueryJobsResult'
  QueryJobsResult:
    description: Result for an individual job returned by a job query
    required:
      - id
      - name
      - status
      - start
    properties:
      id:
        type: string
        description: Job ID
      name:
        type: string
        description: Job name
      status:
        $ref: '#/definitions/JobStatus'
      start:
        type: string
        format: date-time
        description: Job start datetime
      end:
        type: string
        format: date-time
        description: Job end datetime
      labels:
        type: object
        description: Custom job labels with string values
responses:
  BadRequest:
    description: 'Bad request'
  ServerError:
    description: 'Internal server error'
  NotFound:
    description: 'Job not found'
